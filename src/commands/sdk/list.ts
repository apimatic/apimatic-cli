import { cli } from "cli-ux";
import { log } from "../../utils/log";
import { Command, flags } from "@oclif/command";

import { CodeGeneration } from "../../types/sdk/list";
import { getSdkList } from "../../controllers/sdk/list";
import { ApiError } from "@apimatic/sdk";
import { SDKGenerateUnprocessableError } from "../../types/sdk/generate";
import { AuthenticationError } from "../../types/utils";
import { isJSONParsable, replaceHTML } from "../../utils/utils";

export default class SdkList extends Command {
  static description = "List all the SDKs generated by you.";

  static flags = {
    external: flags.boolean({
      default: false,
      description: "List all the SDKs generated externally with file or url"
    }),
    "api-entity": flags.string({
      description: "API Entity Id to list SDK generations for"
    }),
    "auth-key": flags.string({ description: "Override current authentication state with an authentication key" })
  };

  async run() {
    const { flags } = this.parse(SdkList);

    try {
      const sdkList: CodeGeneration[] = await getSdkList(flags, this.config.configDir);

      if (!flags.external && !flags["api-entity"]) {
        throw new Error("Please provide either --external or --api-entity");
      }

      sdkList.length
        ? cli.table(
            sdkList,
            {
              "codegen-id": {
                minWidth: 15,
                get: (row: CodeGeneration) => row.id
              },
              template: {
                minWidth: 10,
                get: (row: CodeGeneration) => row.template
              },
              "api-entity": {
                minWidth: 10,
                get: (row: CodeGeneration) => row["api-entity"]
              }
            },
            {
              printLine: this.log
            }
          )
        : log.info("No SDKs found");
    } catch (error) {
      if ((error as ApiError).result) {
        const apiError = error as ApiError;
        const result = apiError.result as SDKGenerateUnprocessableError;
        if (apiError.statusCode === 400 && isJSONParsable(result.message)) {
          const errors = JSON.parse(result.message);
          if (Array.isArray(errors.Errors) && apiError.statusCode === 400) {
            log.error(replaceHTML(`${JSON.parse(result.message).Errors[0]}`));
          }
        } else if (apiError.statusCode === 401 && apiError.body && typeof apiError.body === "string") {
          log.error("You are not authorized to perform this action");
        } else if (
          apiError.statusCode === 500 &&
          apiError.body &&
          typeof apiError.body === "string" &&
          isJSONParsable(apiError.body)
        ) {
          log.error(JSON.parse(apiError.body).message);
        } else if (
          apiError.statusCode === 422 &&
          apiError.body &&
          typeof apiError.body === "string" &&
          isJSONParsable(apiError.body)
        ) {
          log.error(JSON.parse(apiError.body)["dto.Url"][0]);
        } else {
          log.error(replaceHTML(result.message));
        }
      } else if ((error as AuthenticationError).statusCode === 401) {
        log.error("You are not authorized to perform this action");
      } else if (
        (error as AuthenticationError).statusCode === 402 &&
        (error as AuthenticationError).body &&
        typeof (error as AuthenticationError).body === "string"
      ) {
        log.error(replaceHTML((error as AuthenticationError).body));
      } else {
        if ((error as ApiError).statusCode === 404) {
          log.error("Couldn't find the API Entity specified");
        } else {
          log.error(`${(error as Error).message}`);
        }
      }
    }
  }
}
